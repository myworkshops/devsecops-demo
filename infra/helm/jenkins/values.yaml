---
# Jenkins Helm Chart Values
# Credentials will be injected from secrets.local.yaml via bootstrap

controller:
  componentName: "jenkins-controller"

  image:
    tag: "jdk21"

  # Admin credentials (will be set from secrets.local.yaml)
  admin:
    username: "admin"
    # password: set via --set
    createSecret: true

  # Jenkins URL
  jenkinsUrl: "http://jenkins.jenkins.svc.cluster.local:8080"

  # Number of executors on the controller (for simple jobs)
  numExecutors: 2

  # Resources
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2000m"
      memory: "4Gi"

  # Java options
  javaOpts: "-Xms1g -Xmx2g"

  # Service configuration
  serviceType: ClusterIP
  servicePort: 8080

  # Essential plugins - let Jenkins resolve latest compatible versions
  installPlugins:
    - kubernetes
    - workflow-aggregator
    - git
    - configuration-as-code
    - credentials-binding
    - docker-workflow
    - blueocean
    - sonar
    - prometheus
    - ansicolor
    - timestamper
    - build-timeout
    - pipeline-utility-steps

  # Skip setup wizard
  installLatestPlugins: true
  installLatestSpecifiedPlugins: true

  # Additional init scripts to skip setup wizard
  initScripts:
    - |
      import jenkins.model.*
      import jenkins.install.*
      def instance = Jenkins.getInstance()
      instance.setInstallState(InstallState.INITIAL_SETUP_COMPLETED)
      instance.save()

  # JCasC configuration
  JCasC:
    enabled: true
    defaultConfig: true
    configScripts:
      welcome-message: |
        jenkins:
          systemMessage: "DevSecOps Device Statistics Platform - CI/CD"
      security: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "admin"
                  name: "Administrator"
                  password: "${chart-admin-password}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false
      credentials: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword:
                      scope: GLOBAL
                      id: "${GITHUB_CREDENTIALS_ID}"
                      username: "${GITHUB_CREDENTIALS_ID}"
                      password: "${GITHUB_TOKEN}"
                      description: "GitHub Token - Used for git operations and shared library"
      shared-library: |
        unclassified:
          globalLibraries:
            libraries:
              - name: "jenkins-library"
                retriever:
                  modernSCM:
                    scm:
                      gitSource:
                        remote: "${GIT_REPOSITORY}"
                        credentialsId: "${GITHUB_CREDENTIALS_ID}"
                defaultVersion: "${GIT_LIBRARY_BRANCH}"
                implicit: false
                allowVersionOverride: true
      kubernetes-cloud: |
        jenkins:
          clouds:
            - kubernetes:
                name: "kubernetes"
                serverUrl: "https://kubernetes.default.svc.cluster.local"
                skipTlsVerify: true
                namespace: "jenkins"
                jenkinsUrl: "http://jenkins.jenkins.svc.cluster.local:8080"
                jenkinsTunnel: "jenkins-agent.jenkins.svc.cluster.local:50000"
                templates:
                  - name: "ansible-agent"
                    namespace: "jenkins"
                    label: "ansible"
                    nodeUsageMode: NORMAL
                    containers:
                      - name: "jnlp"
                        image: "wmoinar/jenkins-agent-ansible:latest"
                        alwaysPullImage: true
                        workingDir: "/home/jenkins/agent"
                        ttyEnabled: true
                        resourceRequestCpu: "500m"
                        resourceRequestMemory: "512Mi"
                        resourceLimitCpu: "1000m"
                        resourceLimitMemory: "1Gi"

  # Persistent volume
  persistence:
    enabled: true
    size: "10Gi"
    storageClass: "local-path"

  # Security context
  securityContext:
    runAsUser: 1000
    fsGroup: 1000
    runAsNonRoot: true

  # Service account
  serviceAccount:
    create: true
    name: jenkins

# Agent configuration
agent:
  enabled: true
  podName: jenkins-agent

  # Resources for agents
  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"

# RBAC
rbac:
  create: true
  readSecrets: true

# Persistence for jobs and builds
persistence:
  enabled: true
  size: 10Gi
  storageClass: "local-path"
