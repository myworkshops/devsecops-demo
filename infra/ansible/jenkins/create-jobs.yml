---
- name: Create Jenkins pipeline jobs
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    jenkins_url: "http://localhost:8080"

  tasks:
    - name: Load configuration from secrets file
      include_vars:
        file: "{{ playbook_dir }}/../../secrets.local.yaml"
        name: secrets

    - name: Set Jenkins variables
      set_fact:
        jenkins_admin_user: "admin"
        jenkins_admin_password: "{{ secrets.jenkins.admin_password }}"
        git_repository: "{{ secrets.jenkins.git_repository }}"
        git_library_branch: "{{ secrets.jenkins.git_library_branch }}"
        git_credentials_id: "{{ secrets.jenkins.git_credentials_id }}"
        lock_log: "{{ secrets.jenkins.lock_log | default(true) }}"

    - name: Wait for Jenkins to be ready
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
        validate_certs: false
      register: jenkins_ready
      until: jenkins_ready.status == 200
      retries: 30
      delay: 10

    - name: Create DeployDevSecOpsApp pipeline job
      community.general.jenkins_script:
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        validate_certs: false
        timeout: 30
        script: |
          import jenkins.model.Jenkins
          import org.jenkinsci.plugins.workflow.job.WorkflowJob
          import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition
          import hudson.plugins.git.GitSCM
          import hudson.plugins.git.BranchSpec

          def jenkins = Jenkins.getInstance()
          def jobName = "DeployDevSecOpsApp"

          // Delete job if it exists
          def existingJob = jenkins.getItem(jobName)
          if (existingJob != null) {
              existingJob.delete()
          }

          // Create new pipeline job
          def job = jenkins.createProject(WorkflowJob, jobName)
          job.setDescription("DevSecOps Application Deployment Pipeline - Automated CI/CD with Vault integration")

          // Configure default parameters
          def paramGitRepo = new hudson.model.StringParameterDefinition(
              "GIT_REPOSITORY",
              "{{ git_repository }}",
              "Git repository URL"
          )
          def paramGitBranch = new hudson.model.StringParameterDefinition(
              "GIT_BRANCH",
              "{{ git_library_branch }}",
              "Git branch to build"
          )
          def paramGitCreds = new hudson.model.StringParameterDefinition(
              "GIT_CREDENTIALS_ID",
              "{{ git_credentials_id }}",
              "Git credentials ID (configured in Jenkins)"
          )
          def paramsDef = new hudson.model.ParametersDefinitionProperty(
              [paramGitRepo, paramGitBranch, paramGitCreds]
          )
          job.addProperty(paramsDef)

          // Configure to use pipeline script from SCM
          def scm = new GitSCM("{{ git_repository }}")
          scm.branches = [new BranchSpec("*/{{ git_library_branch }}")]

          // Add credentials to SCM
          def userRemoteConfig = new hudson.plugins.git.UserRemoteConfig(
              "{{ git_repository }}",
              null,
              null,
              "{{ git_credentials_id }}"
          )
          scm.userRemoteConfigs = [userRemoteConfig]

          def definition = new CpsScmFlowDefinition(scm, "pipelines/DeployDevSecOpsApp.groovy")
          definition.setLightweight(true)
          job.setDefinition(definition)

          job.save()

          println "✓ Pipeline job 'DeployDevSecOpsApp' created successfully"
      register: job_result
      no_log: "{{ lock_log }}"

    - name: Create deploy-environment pipeline job
      community.general.jenkins_script:
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        validate_certs: false
        timeout: 30
        script: |
          import jenkins.model.Jenkins
          import org.jenkinsci.plugins.workflow.job.WorkflowJob
          import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition
          import hudson.plugins.git.GitSCM
          import hudson.plugins.git.BranchSpec

          def jenkins = Jenkins.getInstance()
          def jobName = "deploy-environment"

          // Delete job if it exists
          def existingJob = jenkins.getItem(jobName)
          if (existingJob != null) {
              existingJob.delete()
          }

          // Create new pipeline job
          def job = jenkins.createProject(WorkflowJob, jobName)
          job.setDescription("Deploy complete environment (MongoDB + Keycloak + all applications)")

          // Configure to use pipeline script from SCM
          def scm = new GitSCM("{{ git_repository }}")
          scm.branches = [new BranchSpec("*/{{ git_library_branch }}")]

          // Add credentials to SCM
          def userRemoteConfig = new hudson.plugins.git.UserRemoteConfig(
              "{{ git_repository }}",
              null,
              null,
              "{{ git_credentials_id }}"
          )
          scm.userRemoteConfigs = [userRemoteConfig]

          def definition = new CpsScmFlowDefinition(scm, "pipelines/deploy-environment.groovy")
          definition.setLightweight(true)
          job.setDefinition(definition)

          job.save()

          println "✓ Pipeline job 'deploy-environment' created successfully"
      register: deploy_environment_result
      no_log: "{{ lock_log }}"

    - name: Create deploy-app pipeline job
      community.general.jenkins_script:
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        validate_certs: false
        timeout: 30
        script: |
          import jenkins.model.Jenkins
          import org.jenkinsci.plugins.workflow.job.WorkflowJob
          import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition
          import hudson.plugins.git.GitSCM
          import hudson.plugins.git.BranchSpec

          def jenkins = Jenkins.getInstance()
          def jobName = "deploy-app"

          // Delete job if it exists
          def existingJob = jenkins.getItem(jobName)
          if (existingJob != null) {
              existingJob.delete()
          }

          // Create new pipeline job
          def job = jenkins.createProject(WorkflowJob, jobName)
          job.setDescription("Deploy application with Helm using pre-built images (generic, reusable)")

          // Configure to use pipeline script from SCM
          def scm = new GitSCM("{{ git_repository }}")
          scm.branches = [new BranchSpec("*/{{ git_library_branch }}")]

          // Add credentials to SCM
          def userRemoteConfig = new hudson.plugins.git.UserRemoteConfig(
              "{{ git_repository }}",
              null,
              null,
              "{{ git_credentials_id }}"
          )
          scm.userRemoteConfigs = [userRemoteConfig]

          def definition = new CpsScmFlowDefinition(scm, "pipelines/deploy-app.groovy")
          definition.setLightweight(true)
          job.setDefinition(definition)

          job.save()

          println "✓ Pipeline job 'deploy-app' created successfully"
      register: deploy_app_result
      no_log: "{{ lock_log }}"

    - name: Trigger initial pipeline execution
      community.general.jenkins_script:
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        validate_certs: false
        timeout: 30
        script: |
          import jenkins.model.Jenkins
          import hudson.model.StringParameterValue
          import hudson.model.ParametersAction

          def jenkins = Jenkins.getInstance()
          def jobName = "DeployDevSecOpsApp"
          def job = jenkins.getItem(jobName)

          if (job != null) {
              // Create parameters for the build
              def params = [
                  new StringParameterValue("GIT_REPOSITORY", "{{ git_repository }}"),
                  new StringParameterValue("GIT_BRANCH", "{{ git_library_branch }}"),
                  new StringParameterValue("GIT_CREDENTIALS_ID", "{{ git_credentials_id }}")
              ]
              def paramsAction = new ParametersAction(params)

              // Schedule the build with parameters
              job.scheduleBuild2(0, paramsAction)

              println "✓ Initial build triggered for 'DeployDevSecOpsApp'"
          } else {
              println "✗ Job 'DeployDevSecOpsApp' not found"
          }
      register: trigger_result
      no_log: "{{ lock_log }}"

    - name: Display configuration summary
      debug:
        msg:
          - "Jenkins pipeline jobs created successfully"
          - "Jenkins URL: {{ jenkins_url }}"
          - ""
          - "Main pipeline: DeployDevSecOpsApp"
          - "  - Script: pipelines/DeployDevSecOpsApp.groovy"
          - "  - Runs Vault tests and deploys all environments in parallel"
          - ""
          - "Environment deployment: deploy-environment"
          - "  - Script: pipelines/deploy-environment.groovy"
          - "  - Deploys MongoDB + all applications for one environment"
          - "  - Parameters: ENVIRONMENT (develop/stage/production)"
          - ""
          - "Application deployment: deploy-app"
          - "  - Script: pipelines/deploy-app.groovy"
          - "  - Generic pipeline: helm deploy using pre-built images"
          - "  - Parameters: APP_NAME, ENVIRONMENT, DOCKERHUB_REGISTRY"
          - ""
          - "Git repository: {{ git_repository }}"
          - "Git branch: {{ git_library_branch }}"
          - "Environment branches: develop→develop, stage→stage, production→main"
          - "Note: Shared library 'jenkins-library' configured via JCasC"
